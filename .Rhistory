ylab = "Age",
ylim = c(0,75),
col = 'skyblue3',
main = "Boxplot of Age OkCupid users")
par(mfrow = c(1,2))
hist(date_df$AGE,
xlab = 'Age',
xlim = c(15,75),
ylim = c(0,700),
col = 'skyblue3',
breaks = 20,
main = 'Histogram of Age OkCupid users')
plot(density(date_df$AGE),
xlab = 'Age',
xlim = c(15,75),
main = 'Density plot of Age OkCupid users')
# Download the bootstrap library for for jackknife and bootstrap functions
library(bootstrap)
# Original Median of Age(Centrality)
age_median
# theta (parameter of interest): median(measure of centrality)
jk_median_samples <- jackknife(date_df$AGE, theta = median)
# jack.values: The n leave-one-out values of theta
# mean of jack.values: estimate of the median from jackknife process
jk_median_estimator <- mean(jk_median_samples$jack.values)
# The jackknife estimate of standard error
jk_median_se <- jk_median_samples$jack.se
# The jackknife estimate of bias
jk_median_bias <- jk_median_samples$jack.bias
## set seed
set.seed(0)
## set the number of bootstrap replicates
nbootstaps <- 10000
## theta (parameter of interest): median(measure of centrality)
## nboots: 10000 bootstrap replications
bs_median_samples <- bootstrap(date_df$AGE,
nboot = nbootstaps,
theta = median,
)
## estimate of theta (median) from bootstrapping
bs_median_estimator <- mean(bs_median_samples$thetastar)
## estimate of the standard error
bs_median_se <- sd(bs_median_samples$thetastar)
## estimate of bias (estimate - bootstrapped estimator)
bs_median_bias <- age_median - mean(bs_median_samples$thetastar)
summart_centrality <- data.frame(
Measure = c("Estimator", "Standard Error", "Bias"),
Jackknife = c(jk_median_estimator, jk_median_se, jk_median_bias),
Bootstrap = c(bs_median_estimator, bs_median_se, bs_median_bias)
)
summart_centrality
# Original IQR of Age(Dispersion)
age_iqr
# theta (parameter of interest): IQR(measure of dispersion)
jk_IQR_samples <- jackknife(date_df$AGE, theta = IQR)
# mean of jack.values: estimate of the IQR from jackknife process
jk_IQR_estimator <-mean(jk_IQR_samples$jack.values)
# The jackknife estimate of standard error
jk_IQR_se <- jk_IQR_samples$jack.se
# The jackknife estimate of bias
jk_IQR_bias <- jk_IQR_samples$jack.bias
# set seed
set.seed(0)
# set the number of bootstrap replicates
nbootstaps <- 10000
# theta (parameter of interest): IQR(measure of dispersion)
# nboots: 10000 bootstrap replications
bs_IQR_samples <- bootstrap(date_df$AGE,
nboot = nbootstaps,
theta = IQR,
)
# estimate of theta (IQR) from bootstrapping
bs_IQR_estimator <- mean(bs_IQR_samples$thetastar)
# estimate of the standard error
bs_IQR_se <- sd(bs_IQR_samples$thetastar)
# estimate of bias (estimate - bootstrapped estimator)
bs_IQR_bias <- age_iqr - mean(bs_IQR_samples$thetastar)
summart_dispersion <- data.frame(
Measure = c("Estimator", "Standard Error", "Bias"),
Jackknife = c(jk_IQR_estimator, jk_IQR_se, jk_IQR_bias),
Bootstrap = c(bs_IQR_estimator, bs_IQR_se, bs_IQR_bias)
)
summart_dispersion
par(mfrow = c(2,1))
plot(density(bs_median_samples$thetastar),
xlab = 'Median Age',
main = 'Density Plot of Sampling Distribtuion of \nthe Median Age for All Users')
hist(bs_median_samples$thetastar,
freq = TRUE,
xlab = 'Median stride length (cm)',
main = 'Histogram of Sampling Distribution of \nthe Median Stride Length for All Mice')
par(mfrow = c(1,2))
plot(density(bs_median_samples$thetastar),
xlab = 'Median Age',
main = 'Density Plot of Sampling Distribtuion of \nthe Median Age for All Users')
hist(bs_median_samples$thetastar,
freq = TRUE,
xlab = 'Median stride length (cm)',
main = 'Histogram of Sampling Distribution of \nthe Median Stride Length for All Mice')
#overal Summaries
age_sum <-summary(date_df$AGE)
age_sum
length(date_df$AGE)
quantile(bs_median_samples$thetastar, probs =c(0.025, 0.975))
quantile(bs_IQR_samples$thetastar, probs =c(0.025, 0.975))
par(mfrow = c(1,2))
plot(density(bs_IQR_samples$thetastar),
xlab = 'Median Age',
main = 'Density Plot of Sampling Distribtuion of \nthe Median Age for All Users')
hist(bs_IQR_samples$thetastar,
freq = TRUE,
xlab = 'Median stride length (cm)',
main = 'Histogram of Sampling Distribution of \nthe Median Stride Length for All Users')
par(mfrow = c(1,2))
plot(density(bs_median_samples$thetastar),
xlab = 'Median Age',
main = 'Density Plot of Sampling Distribtuion of \nthe Median Age for All Users')
hist(bs_median_samples$thetastar,
freq = TRUE,
xlab = 'Median stride length (cm)',
main = 'Histogram of Sampling Distribution of \nthe Median Stride Length for All Users')
quantile(bs_median_samples$thetastar, probs =c(0.025, 0.975))
## Graphical displays of the  the bootstrap samples distribution for dispersion
```{r}
par(mfrow = c(1,2))
plot(density(bs_IQR_samples$thetastar),
xlab = 'Median Age',
main = 'Density Plot of Sampling Distribtuion of \nthe Median Age for All Users')
hist(bs_IQR_samples$thetastar,
freq = TRUE,
xlab = 'Median stride length (cm)',
main = 'Histogram of Sampling Distribution of \nthe Median Stride Length for All Users')
quantile(bs_IQR_samples$thetastar, probs =c(0.025, 0.975))
airfare_df <- read.csv('Airfare.csv')
View(airfare_df)
names(airfare_df)
str(airfare_df)
## set the number of bootstrap replicates
nbootstaps <- 10000
## theta (parameter of interest): IQR(measure of dispersion)
## nboots: 10000 bootstrap replications
bs_IQR_samples <- bootstrap(date_df$AGE,
nboot = nbootstaps,
theta = IQR,
)
install.packages('mass')
install.packages('MASS')
# Load the necessary library
library(MASS)
# Load the iris dataset
data(iris)
# View the first few rows of the dataset
head(iris)
# Split the dataset into training and test sets
set.seed(123)  # For reproducibility
train_indices <- sample(1:nrow(iris), size = 0.7 * nrow(iris))
train_data <- iris[train_indices, ]
test_data <- iris[-train_indices, ]
# Perform LDA
lda_model <- lda(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = train_data)
lda_model
# Print the model summary
print(lda_model)
# Predict on the test set
predictions <- predict(lda_model, test_data)
# View the predicted classes
predicted_classes <- predictions$class
print(predicted_classes)
# Compare predicted classes with actual classes
table(predicted_classes, test_data$Species)
# Calculate accuracy
accuracy <- mean(predicted_classes == test_data$Species)
print(paste("Accuracy:", round(accuracy * 100, 2), "%"))
setwd("C:/Users/ahmet/OneDrive - Murdoch University/S2-2024/ICT515-Foundation of Data Science/assignment2")
realestate <- read.csv('Real_estate_valuation_dataset.csv')
View(realestate)
houseprice <- read.csv('house_price_regression_dataset.csv')
str(houseprice)
colSums(is.na(houseprice))
summary(houseprice$House_Price)
plot(houseprice$House_Price)
hist(houseprice$House_Price)
hist(houseprice$Square_Footage)
hist(houseprice$Num_Bedrooms)
hist(houseprice$Num_Bathrooms)
hist(houseprice$Year_Built)
hist(houseprice$Garage_Size )
setwd("C:/Users/ahmet/OneDrive - Murdoch University/S2-2024/ICT515-Foundation of Data Science/assignment2")
airquality <- read.csv('Copy of AirQualityUCI.csv')
airquality <- read.csv('AirQualityUCI.csv')
#check missing values!
airquality[airquality == -200 ] <- NA
colSums(is.na(airquality))
str(airquality)
#check missing values!
airquality[airquality == -200 ] <- NA
colSums(is.na(airquality))
str(airquality)
# dataset
airquality <- read.csv('../Datasets/AirQualityUCI.csv')
setwd("C:/Users/ahmet/Github/UCI_airquality")
# dataset
airquality <- read.csv('../Datasets/AirQualityUCI.csv')
# libraries
library(ggplot2)
# dataset
airquality <- read.csv('../Datasets/AirQualityUCI.csv')
# Convert Date and Time columns to a single datetime column
airquality$Date <- as.POSIXct(paste(airquality$Date, airquality$Time), format="%d/%m/%Y %H:%M:%S")
# Remove the Time column
airquality$Time <- NULL
# replace the missing values -200 with NA
airquality[airquality == -200 ] <- NA
# info about the dataset
str(clean_airquality)
# info about the dataset
str(airquality)
head(airquality)
# check the missing values
colSums(is.na(airquality))
# Remove the NMHC_GT (8443 missing values)
airquality$NMHC_GT <- NULL
# remove the missing values
clean_airquality <- subset(airquality, complete.cases(airquality))
# check new dataset
colSums(is.na(clean_airquality))
str(clean_airquality)
head(clean_airquality)
## Histograms
# Histogram for CO_GT
ggplot(clean_airquality, aes(x = CO_GT)) +
geom_histogram(binwidth = 0.3, fill = "skyblue", color = "black") +
labs(title = "Histogram of CO (GT)", x = "CO(mg/m^3)") +
theme_minimal()
# Histogram for PT08_S1_CO
ggplot(clean_airquality, aes(x = PT08_S1_CO)) +
geom_histogram(binwidth = 30, fill = "skyblue", color = "black") +
labs(title = "Histogram of PT08.S1(CO) ", x = "PT08.S1(CO)") +
theme_minimal()
# Histogram for C6H6_GT (Benzene)
ggplot(clean_airquality, aes(x = C6H6_GT)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Benzene (C6H6(GT))", x = "Benzene (µg/m^3)") +
theme_minimal()
# Histogram for PT08_S2_NMHC
ggplot(clean_airquality, aes(x = PT08_S2_NMHC)) +
geom_histogram(binwidth = 25, fill = "skyblue", color = "black") +
labs(title = "Histogram of PT08.S2(NMHC) ", x = "PT08.S2(NMHC)") +
theme_minimal()
# Histogram for NOx_GT
ggplot(clean_airquality, aes(x = NOx_GT)) +
geom_histogram(binwidth = 25, fill = "skyblue", color = "black") +
labs(title = "Histogram of NOx (GT)", x = "NOx(GT)") +
theme_minimal()
# Histogram for PT08_S3_NOx
ggplot(clean_airquality, aes(x = PT08_S3_NOx)) +
geom_histogram(binwidth = 30, fill = "skyblue", color = "black") +
labs(title = "Histogram of PT08.S3(NOx) ", x = "PT08.S3(NOx)") +
theme_minimal()
# Histogram for NO2_GT
ggplot(clean_airquality, aes(x = NO2_GT)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
labs(title = "Histogram of NO2 (GT)", x = "NO2 (µg/m^3)") +
theme_minimal()
# Histogram for PT08_S4_NO2
ggplot(clean_airquality, aes(x = PT08_S4_NO2)) +
geom_histogram(binwidth = 30, fill = "skyblue", color = "black") +
labs(title = "Histogram of PT08.S4(NO2) ", x = "PT08.S4(NO2)") +
theme_minimal()
# Histogram for PT08_S5_O3
ggplot(clean_airquality, aes(x = PT08_S5_O3)) +
geom_histogram(binwidth = 50, fill = "skyblue", color = "black") +
labs(title = "Histogram of PT08.S5(O3) ", x = "PT08.S5(O3)") +
theme_minimal()
# Histogram for Temperature (T)
ggplot(clean_airquality, aes(x = T)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Temperature", x = "Temperature (°C)") +
theme_minimal()
# Histogram for Relative Humidity
ggplot(clean_airquality, aes(x = RH)) +
geom_histogram(binwidth = 1.5, fill = "skyblue", color = "black") +
labs(title = "Histogram of Relative Humidity", x = "Relative Humidity (%)") +
theme_minimal()
# Histogram for Absolute Humidity
ggplot(clean_airquality, aes(x = AH)) +
geom_histogram(binwidth = 0.04, fill = "skyblue", color = "black") +
labs(title = "Histogram of Absolute Humidity", x = "Absolute Humidity") +
theme_minimal()
# info about the dataset
str(airquality)
head(airquality)
# info about the dataset
str(airquality)
# libraries
library(ggplot2)
# dataset
airquality <- read.csv('../Datasets/AirQualityUCI.csv')
# Convert Date and Time columns to a single datetime column
airquality$Date <- as.POSIXct(paste(airquality$Date, airquality$Time), format="%d/%m/%Y %H:%M:%S")
# Remove the Time column
airquality$Time <- NULL
# replace the missing values -200 with NA
airquality[airquality == -200 ] <- NA
# info about the dataset
str(airquality)
head(airquality)
# dataset
airquality <- read.csv('../Datasets/AirQualityUCI.csv')
# replace the missing values -200 with NA
airquality[airquality == -200 ] <- NA
# check the missing values
colSums(is.na(airquality))
# Convert Date and Time columns to a single datetime column
airquality$Date <- as.POSIXct(paste(airquality$Date, airquality$Time), format="%d/%m/%Y %H:%M:%S")
view(airquality)
View(airquality)
# remove the missing values
clean_airquality <- subset(airquality, complete.cases(airquality))
# check new dataset
colSums(is.na(clean_airquality))
str(clean_airquality)
# libraries
library(ggplot2)
# dataset
airquality <- read.csv('../Datasets/AirQualityUCI.csv')
# Convert Date and Time columns to a single datetime column
airquality$Date <- as.POSIXct(paste(airquality$Date, airquality$Time), format="%d/%m/%Y %H:%M:%S")
# Remove the Time column
airquality$Time <- NULL
# replace the missing values -200 with NA
airquality[airquality == -200 ] <- NA
View(airquality)
# info about the dataset
str(airquality)
head(airquality)
# check the missing values
colSums(is.na(airquality))
# Remove the NMHC_GT (8443 missing values)
airquality$NMHC_GT <- NULL
# remove the missing values
clean_airquality <- subset(airquality, complete.cases(airquality))
# check new dataset
colSums(is.na(clean_airquality))
str(clean_airquality)
summaryPlot(clean_airquality, period = 'months')
# Trendlevel plot
trendLevel(clean_airquality, pollutant = 'AH', auto.text = TRUE, main = 'AH')
trendLevel
# libraries
library(ggplot2)
# Trendlevel plot
trendLevel(clean_airquality, pollutant = 'AH', auto.text = TRUE, main = 'AH')
calendarPlot(clean_airquality, pollutant = 'AH', year = 2004)
# Time series plot for CO (GT)
ggplot(clean_airquality, aes(x = Datetime, y = CO_GT)) +
geom_line(color = "blue") +
labs(title = "Time Series Plot of CO (GT)", x = "Time", y = "CO (mg/m^3)") +
theme_minimal()
# Decomposition (using stl in R for seasonal decomposition)
co_ts <- ts(clean_airquality$CO_GT, frequency = 24)  # Assuming data is hourly
# Time series plot for CO (GT)
ggplot(clean_airquality, aes(x = Date, y = CO_GT)) +
geom_line(color = "blue") +
labs(title = "Time Series Plot of CO (GT)", x = "Time", y = "CO (mg/m^3)") +
theme_minimal()
# Decomposition (using stl in R for seasonal decomposition)
co_ts <- ts(clean_airquality$CO_GT, frequency = 24)  # Assuming data is hourly
decomposed_co <- stl(co_ts, s.window = "periodic")
plot(decomposed_co)
# Create lag features for CO (e.g., 1 hour, 2 hours, 3 hours)
clean_airquality$CO_lag1 <- dplyr::lag(clean_airquality$CO_GT, 1)
clean_airquality$CO_lag2 <- dplyr::lag(clean_airquality$CO_GT, 2)
clean_airquality$CO_lag3 <- dplyr::lag(clean_airquality$CO_GT, 3)
# Create 24-hour rolling mean for CO
clean_airquality$CO_rolling_mean <- zoo::rollmean(clean_airquality$CO_GT, k = 24, fill = NA)
# Faceted line plot for multiple variables over time
airquality_long <- tidyr::gather(clean_airquality, key = "Variable", value = "Value", -Date)
ggplot(airquality_long, aes(x = Date, y = Value, color = Variable)) +
geom_line() +
facet_wrap(~ Variable, scales = "free_y") +
labs(title = "Time Series Plots of Multiple Variables", x = "Time", y = "Value") +
theme_minimal()
# Faceted line plot for multiple variables over time
airquality_long <- tidyr::gather(clean_airquality, key = "Variable", value = "Value", -Date)
ggplot(airquality_long, aes(x = Date, y = Value, color = Variable)) +
geom_line() +
facet_wrap(~ Variable, scales = "free_y") +
labs(title = "Time Series Plots of Multiple Variables", x = "Time", y = "Value") +
theme_minimal()
# Faceted line plot for multiple variables over time
airquality_long <- tidyr::gather(clean_airquality, key = "Variable", value = "Value", -Date)
ggplot(airquality_long, aes(x = Date, y = Value, color = Variable)) +
geom_line() +
facet_wrap(~ Variable, scales = "free_y") +
labs(title = "Time Series Plots of Multiple Variables", x = "Time", y = "Value") +
theme_minimal()
# libraries
library(ggplot2)
library(corrplot)
# dataset
airquality <- read.csv('../Datasets/AirQualityUCI.csv', stringsAsFactors = T)
# Convert Date and Time columns to a single datetime column
airquality$Date <- as.POSIXct(paste(airquality$Date, airquality$Time), format="%d/%m/%Y %H:%M:%S")
# Remove the Time column
airquality$Time <- NULL
# replace the missing values -200 with NA
airquality[airquality == -200 ] <- NA
# info about the dataset
str(airquality)
head(airquality)
# check the missing values
colSums(is.na(airquality))
# Remove the NMHC_GT (8443 missing values)
airquality$NMHC_GT <- NULL
# remove the missing values
clean_airquality <- subset(airquality, complete.cases(airquality))
# check new dataset
colSums(is.na(clean_airquality))
str(clean_airquality)
head(clean_airquality)
## Histograms
# Histogram for CO_GT
ggplot(clean_airquality, aes(x = CO_GT)) +
geom_histogram(binwidth = 0.3, fill = "skyblue", color = "black") +
labs(title = "Histogram of CO (GT)", x = "CO(mg/m^3)") +
theme_minimal()
# Histogram for PT08_S1_CO
ggplot(clean_airquality, aes(x = PT08_S1_CO)) +
geom_histogram(binwidth = 30, fill = "skyblue", color = "black") +
labs(title = "Histogram of PT08.S1(CO) ", x = "PT08.S1(CO)") +
theme_minimal()
# Histogram for C6H6_GT (Benzene)
ggplot(clean_airquality, aes(x = C6H6_GT)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Benzene (C6H6(GT))", x = "Benzene (µg/m^3)") +
theme_minimal()
# Histogram for PT08_S2_NMHC
ggplot(clean_airquality, aes(x = PT08_S2_NMHC)) +
geom_histogram(binwidth = 25, fill = "skyblue", color = "black") +
labs(title = "Histogram of PT08.S2(NMHC) ", x = "PT08.S2(NMHC)") +
theme_minimal()
# Histogram for NOx_GT
ggplot(clean_airquality, aes(x = NOx_GT)) +
geom_histogram(binwidth = 25, fill = "skyblue", color = "black") +
labs(title = "Histogram of NOx (GT)", x = "NOx(GT)") +
theme_minimal()
# Histogram for PT08_S3_NOx
ggplot(clean_airquality, aes(x = PT08_S3_NOx)) +
geom_histogram(binwidth = 30, fill = "skyblue", color = "black") +
labs(title = "Histogram of PT08.S3(NOx) ", x = "PT08.S3(NOx)") +
theme_minimal()
# Histogram for NO2_GT
ggplot(clean_airquality, aes(x = NO2_GT)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
labs(title = "Histogram of NO2 (GT)", x = "NO2 (µg/m^3)") +
theme_minimal()
# Histogram for PT08_S4_NO2
ggplot(clean_airquality, aes(x = PT08_S4_NO2)) +
geom_histogram(binwidth = 30, fill = "skyblue", color = "black") +
labs(title = "Histogram of PT08.S4(NO2) ", x = "PT08.S4(NO2)") +
theme_minimal()
# Histogram for PT08_S5_O3
ggplot(clean_airquality, aes(x = PT08_S5_O3)) +
geom_histogram(binwidth = 50, fill = "skyblue", color = "black") +
labs(title = "Histogram of PT08.S5(O3) ", x = "PT08.S5(O3)") +
theme_minimal()
# Histogram for Temperature (T)
ggplot(clean_airquality, aes(x = T)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Temperature", x = "Temperature (°C)") +
theme_minimal()
# Histogram for Relative Humidity
ggplot(clean_airquality, aes(x = RH)) +
geom_histogram(binwidth = 1.5, fill = "skyblue", color = "black") +
labs(title = "Histogram of Relative Humidity", x = "Relative Humidity (%)") +
theme_minimal()
# Histogram for Absolute Humidity
ggplot(clean_airquality, aes(x = AH)) +
geom_histogram(binwidth = 0.04, fill = "skyblue", color = "black") +
labs(title = "Histogram of Absolute Humidity", x = "Absolute Humidity") +
theme_minimal()
# Correlation matrix
cor_matrix <- cor(clean_airquality[, c("CO_GT", "PT08_S1_CO", "NMHC_GT", "C6H6_GT", "NOx_GT", "NO2_GT", "T", "RH", "AH")], use = "complete.obs")
# Correlation matrix
cor_matrix <- cor(clean_airquality[, c("CO_GT", "PT08_S1_CO", "NMHC_GT", "C6H6_GT", "NOx_GT", "NO2_GT", "T", "RH", "AH")], use = "complete.obs")
corrplot(cor_matrix, method = "color")
###################
# Time series plot for CO (GT)
ggplot(clean_airquality, aes(x = Date, y = CO_GT)) +
geom_line(color = "blue") +
labs(title = "Time Series Plot of CO (GT)", x = "Time", y = "CO (mg/m^3)") +
theme_minimal()
# Decomposition (using stl in R for seasonal decomposition)
co_ts <- ts(clean_airquality$CO_GT, frequency = 24)  # hourly data!
decomposed_co <- stl(co_ts, s.window = "periodic")
plot(decomposed_co)
# Create lag features for CO (e.g., 1 hour, 2 hours, 3 hours)
clean_airquality$CO_lag1 <- dplyr::lag(clean_airquality$CO_GT, 1)
clean_airquality$CO_lag2 <- dplyr::lag(clean_airquality$CO_GT, 2)
clean_airquality$CO_lag3 <- dplyr::lag(clean_airquality$CO_GT, 3)
# Create 24-hour rolling mean for CO
clean_airquality$CO_rolling_mean <- zoo::rollmean(clean_airquality$CO_GT, k = 24, fill = NA)
# Faceted line plot for multiple variables over time
airquality_long <- tidyr::gather(clean_airquality, key = "Variable", value = "Value", -Date)
ggplot(airquality_long, aes(x = Date, y = Value, color = Variable)) +
geom_line() +
facet_wrap(~ Variable, scales = "free_y") +
labs(title = "Time Series Plots of Multiple Variables", x = "Time", y = "Value") +
theme_minimal()
# check the missing values
colSums(is.na(airquality))
