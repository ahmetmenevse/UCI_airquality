runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
install.packages("lattice")
install.packages("lattice")
runApp('C:/Users/ahmet/Github/Dementia')
install.packages("lattice")
shiny::runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
shiny::runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
?colnames
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
comparison_table
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
shiny::runApp('C:/Users/ahmet/Github/Dementia')
shiny::runApp('C:/Users/ahmet/Github/Dementia')
shiny::runApp('C:/Users/ahmet/Github/Dementia')
shiny::runApp('C:/Users/ahmet/Github/Dementia')
git add .
install.packages('VIM')
shiny::runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
runApp('C:/Users/ahmet/Github/Dementia')
shiny::runApp('C:/Users/ahmet/Github/Dementia')
source("C:/Users/ahmet/Github/Dementia/modules/visualization_module.R")
library(car)
library(Matrix, lib.loc = "C:/Program Files/R/R-4.4.0/library")
library(knitr)
runApp('C:/Users/ahmet/Github/Dementia')
#Dowload library of ggplot2 and data
library(ggplot2)
date_df <- read.csv('DatingProfiles(Reduced).csv')
ggplot(date_df, aes(x = AGE)) +
geom_histogram(binwidth = 1, fill = 'blue', color = 'black') +
theme_minimal() +
labs(title = 'Distrubution of Age', x = 'Age', y = 'Frequency')
ggplot(date_df, aes( y = AGE)) +
geom_boxplot(fill = 'navy', color = 'black') +
theme_minimal() +
labs(title = 'Boxplot of Age', y = 'Age')
mean_abs_dev(date_df$AGE)
mean_abs_dev <- function(x) {
return(mean(abs(x- mean(x, na.rm = T)), na.rm = T))
}
mean_abs_dev(date_df$AGE)
age_range
age_range <- range(date_df$AGE)
age_range
age_min <- min(date_df$AGE)
age_min
age_max <- max(date_df$AGE)
age_max
age_max - age_min
quantile(date_df$AGE, c(0, 0.25, 0.50, 0.75, 1))
#overal Summaries
age_sum <-summary(date_df$AGE)
age_sum
boxplot(date_df$AGE)
boxplot(date_df$AGE,
ylab = "Age",
main = "Boxplot of Age ")
boxplot(date_df$AGE,
ylab = "Age",
main = "Boxplot of Age ",
color = 'green')
boxplot(date_df$AGE,
ylab = "Age",
main = "Boxplot of Age ",
color = 'green')
boxplot(date_df$AGE,
ylab = "Age",
main = "Boxplot of Age ",
fill = 'green')
boxplot(date_df$AGE,
ylab = "Age",
main = "Boxplot of Age ")
## Histogram of Age
```{r}
date_df <- read.csv('DatingProfiles(Reduced).csv')
hist(date_df$AGE,
ylib = 'Age',
main = 'Histogram of Age')
hist(date_df$AGE,
ylim  = 'Age',
main = 'Histogram of Age')
hist(date_df$AGE,
ylab = 'Age',
main = 'Histogram of Age')
hist(date_df$AGE,
xlab = 'Age',
main = 'Histogram of Age')
date_df <- read.csv('DatingProfiles(Reduced).csv')
plot(density(bs_median_samples$thetastar),
xlab = 'Median Age',
main = 'Density Plot of Sampling Distribtuion of \nthe Median Age for All Users')
hist(bs_median_samples$thetastar,
freq = TRUE,
xlab = 'Median stride length (cm)',
main = 'Histogram of Sampling Distribution of \nthe Median Stride Length for All Mice')
par(mfrow = c(1,2))
plot(density(bs_median_samples$thetastar),
xlab = 'Median Age',
main = 'Density Plot of Sampling Distribtuion of \nthe Median Age for All Users')
hist(bs_median_samples$thetastar,
freq = TRUE,
xlab = 'Median stride length (cm)',
main = 'Histogram of Sampling Distribution of \nthe Median Age for All Users')
## theta (parameter of interest): median(measure of centrality)
## nboots: 10000 bootstrap replications
bs_median_samples <- bootstrap(date_df$AGE,
nboot = nbootstaps,
theta = median,
)
date_df <- read.csv('DatingProfiles(Reduced).csv')
date_df <- read.csv('DatingProfiles(Reduced).csv')
#Summary Statistic Of Age
colSums(is.na(date_df['AGE']))
#There is no missing.'na.rm' not necessary for calculation of statistic.
age_mean <- mean(date_df$AGE)
age_mean
age_median <- median(date_df$AGE)
age_median
age_min <- min(date_df$AGE)
age_min
age_max <- max(date_df$AGE)
age_max
age_range <- range(date_df$AGE)
age_range
age_max - age_min
## dispersion measures
mean_abs_dev <- function(x) {
return(mean(abs(x- mean(x, na.rm = T)), na.rm = T))
}
mean_abs_dev(date_df$AGE)
age_sd <- sd(date_df$AGE)
age_sd
age_var <- var(date_df$AGE)
age_var
age_iqr <- IQR(date_df$AGE)
age_iqr
quantile(date_df$AGE, c(0, 0.25, 0.50, 0.75, 1))
#overal Summaries
age_sum <-summary(date_df$AGE)
age_sum
boxplot(date_df$AGE,
ylab = "Age",
ylim = c(0,75),
col = 'skyblue3',
main = "Boxplot of Age OkCupid users")
par(mfrow = c(1,2))
hist(date_df$AGE,
xlab = 'Age',
xlim = c(15,75),
ylim = c(0,700),
col = 'skyblue3',
breaks = 20,
main = 'Histogram of Age OkCupid users')
plot(density(date_df$AGE),
xlab = 'Age',
xlim = c(15,75),
main = 'Density plot of Age OkCupid users')
# Download the bootstrap library for for jackknife and bootstrap functions
library(bootstrap)
# Original Median of Age(Centrality)
age_median
# theta (parameter of interest): median(measure of centrality)
jk_median_samples <- jackknife(date_df$AGE, theta = median)
# jack.values: The n leave-one-out values of theta
# mean of jack.values: estimate of the median from jackknife process
jk_median_estimator <- mean(jk_median_samples$jack.values)
# The jackknife estimate of standard error
jk_median_se <- jk_median_samples$jack.se
# The jackknife estimate of bias
jk_median_bias <- jk_median_samples$jack.bias
## set seed
set.seed(0)
## set the number of bootstrap replicates
nbootstaps <- 10000
## theta (parameter of interest): median(measure of centrality)
## nboots: 10000 bootstrap replications
bs_median_samples <- bootstrap(date_df$AGE,
nboot = nbootstaps,
theta = median,
)
## estimate of theta (median) from bootstrapping
bs_median_estimator <- mean(bs_median_samples$thetastar)
## estimate of the standard error
bs_median_se <- sd(bs_median_samples$thetastar)
## estimate of bias (estimate - bootstrapped estimator)
bs_median_bias <- age_median - mean(bs_median_samples$thetastar)
summart_centrality <- data.frame(
Measure = c("Estimator", "Standard Error", "Bias"),
Jackknife = c(jk_median_estimator, jk_median_se, jk_median_bias),
Bootstrap = c(bs_median_estimator, bs_median_se, bs_median_bias)
)
summart_centrality
# Original IQR of Age(Dispersion)
age_iqr
# theta (parameter of interest): IQR(measure of dispersion)
jk_IQR_samples <- jackknife(date_df$AGE, theta = IQR)
# mean of jack.values: estimate of the IQR from jackknife process
jk_IQR_estimator <-mean(jk_IQR_samples$jack.values)
# The jackknife estimate of standard error
jk_IQR_se <- jk_IQR_samples$jack.se
# The jackknife estimate of bias
jk_IQR_bias <- jk_IQR_samples$jack.bias
# set seed
set.seed(0)
# set the number of bootstrap replicates
nbootstaps <- 10000
# theta (parameter of interest): IQR(measure of dispersion)
# nboots: 10000 bootstrap replications
bs_IQR_samples <- bootstrap(date_df$AGE,
nboot = nbootstaps,
theta = IQR,
)
# estimate of theta (IQR) from bootstrapping
bs_IQR_estimator <- mean(bs_IQR_samples$thetastar)
# estimate of the standard error
bs_IQR_se <- sd(bs_IQR_samples$thetastar)
# estimate of bias (estimate - bootstrapped estimator)
bs_IQR_bias <- age_iqr - mean(bs_IQR_samples$thetastar)
summart_dispersion <- data.frame(
Measure = c("Estimator", "Standard Error", "Bias"),
Jackknife = c(jk_IQR_estimator, jk_IQR_se, jk_IQR_bias),
Bootstrap = c(bs_IQR_estimator, bs_IQR_se, bs_IQR_bias)
)
summart_dispersion
par(mfrow = c(2,1))
plot(density(bs_median_samples$thetastar),
xlab = 'Median Age',
main = 'Density Plot of Sampling Distribtuion of \nthe Median Age for All Users')
hist(bs_median_samples$thetastar,
freq = TRUE,
xlab = 'Median stride length (cm)',
main = 'Histogram of Sampling Distribution of \nthe Median Stride Length for All Mice')
par(mfrow = c(1,2))
plot(density(bs_median_samples$thetastar),
xlab = 'Median Age',
main = 'Density Plot of Sampling Distribtuion of \nthe Median Age for All Users')
hist(bs_median_samples$thetastar,
freq = TRUE,
xlab = 'Median stride length (cm)',
main = 'Histogram of Sampling Distribution of \nthe Median Stride Length for All Mice')
#overal Summaries
age_sum <-summary(date_df$AGE)
age_sum
length(date_df$AGE)
quantile(bs_median_samples$thetastar, probs =c(0.025, 0.975))
quantile(bs_IQR_samples$thetastar, probs =c(0.025, 0.975))
par(mfrow = c(1,2))
plot(density(bs_IQR_samples$thetastar),
xlab = 'Median Age',
main = 'Density Plot of Sampling Distribtuion of \nthe Median Age for All Users')
hist(bs_IQR_samples$thetastar,
freq = TRUE,
xlab = 'Median stride length (cm)',
main = 'Histogram of Sampling Distribution of \nthe Median Stride Length for All Users')
par(mfrow = c(1,2))
plot(density(bs_median_samples$thetastar),
xlab = 'Median Age',
main = 'Density Plot of Sampling Distribtuion of \nthe Median Age for All Users')
hist(bs_median_samples$thetastar,
freq = TRUE,
xlab = 'Median stride length (cm)',
main = 'Histogram of Sampling Distribution of \nthe Median Stride Length for All Users')
quantile(bs_median_samples$thetastar, probs =c(0.025, 0.975))
## Graphical displays of the  the bootstrap samples distribution for dispersion
```{r}
par(mfrow = c(1,2))
plot(density(bs_IQR_samples$thetastar),
xlab = 'Median Age',
main = 'Density Plot of Sampling Distribtuion of \nthe Median Age for All Users')
hist(bs_IQR_samples$thetastar,
freq = TRUE,
xlab = 'Median stride length (cm)',
main = 'Histogram of Sampling Distribution of \nthe Median Stride Length for All Users')
quantile(bs_IQR_samples$thetastar, probs =c(0.025, 0.975))
airfare_df <- read.csv('Airfare.csv')
View(airfare_df)
names(airfare_df)
str(airfare_df)
## set the number of bootstrap replicates
nbootstaps <- 10000
## theta (parameter of interest): IQR(measure of dispersion)
## nboots: 10000 bootstrap replications
bs_IQR_samples <- bootstrap(date_df$AGE,
nboot = nbootstaps,
theta = IQR,
)
install.packages('mass')
install.packages('MASS')
# Load the necessary library
library(MASS)
# Load the iris dataset
data(iris)
# View the first few rows of the dataset
head(iris)
# Split the dataset into training and test sets
set.seed(123)  # For reproducibility
train_indices <- sample(1:nrow(iris), size = 0.7 * nrow(iris))
train_data <- iris[train_indices, ]
test_data <- iris[-train_indices, ]
# Perform LDA
lda_model <- lda(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = train_data)
lda_model
# Print the model summary
print(lda_model)
# Predict on the test set
predictions <- predict(lda_model, test_data)
# View the predicted classes
predicted_classes <- predictions$class
print(predicted_classes)
# Compare predicted classes with actual classes
table(predicted_classes, test_data$Species)
# Calculate accuracy
accuracy <- mean(predicted_classes == test_data$Species)
print(paste("Accuracy:", round(accuracy * 100, 2), "%"))
setwd("C:/Users/ahmet/OneDrive/Desktop")
str(energy)
energy <- read.csv('ENB2012_data.csv')
str(energy)
colSums(energy)
colSums(is.na(energy))
summary(energy)
dim(energy)
na.omit(energy)
str(energy)
energy <- na.omit(energy)
str(energy)
# Plot histograms for numerical variables
energy %>% select_if(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
facet_wrap(~ key, scales = "free_x")
library(ggplot2)
library(dplyr)
# Plot histograms for numerical variables
energy %>% select_if(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
facet_wrap(~ key, scales = "free_x")
library(tidyr)
# Plot histograms for numerical variables
energy %>% select_if(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
facet_wrap(~ key, scales = "free_x")
setwd("C:/Users/ahmet/Github/UCI_airquality")
library(ggplot2)
library(corrplot) # correlation plot
library(lubridate) # split hours, days and months
library(DMwR2)
library(VIM)
library(caret)
library(car)
library(forecast) # ARIMA model
library(tseries)
# Load the dataset
airquality <- read.csv('../Datasets/AirQualityUCI.csv')
#### EDA ####
# info about the dataset
head(airquality)
str(airquality)
summary(airquality)
# replace the missing values -200 with NA
airquality[airquality == -200 ] <- NA
# check the missing values
colSums(is.na(airquality))
# Convert Date and Time columns to a single datetime column
airquality$Date <- as.POSIXct(paste(airquality$Date, airquality$Time), format="%d/%m/%Y %H:%M:%S")
# Create month, day and hour columns
airquality <- airquality %>%
mutate(hour = factor(hour(Date)),
weekdays = wday(Date, label = TRUE, week_start = 1), # set start day for monday
month = factor(month(Date, label = TRUE, abbr = TRUE), levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")))
# Count rows with missing values for each month
rows_with_missing_by_month <- airquality %>%
group_by(month) %>%
summarise(rows_with_missing = sum(rowSums(is.na(across(everything()))) > 0)) %>%
arrange(month)
rows_with_missing_by_month
# Plot histograms for numerical variables
airquality %>% select_if(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
facet_wrap(~ key, scales = "free_x")
# Boxplots for numerical variables
airquality %>% select_if(is.numeric) %>%
pivot_longer(everything()) %>%
ggplot(aes(x = name, y = value)) +
geom_boxplot(fill = "skyblue", color = "black") +
theme_minimal() +
xlab("Variables") +
ylab("Values") +
ggtitle("Boxplots of Numeric Variables in airquality Dataset") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Boxplots for numerical variables
energy %>% select_if(is.numeric) %>%
pivot_longer(everything()) %>%
ggplot(aes(x = name, y = value)) +
geom_boxplot(fill = "skyblue", color = "black") +
theme_minimal() +
xlab("Variables") +
ylab("Values") +
ggtitle("Boxplots of Numeric Variables in airquality Dataset") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
cor_matrix <- cor(energy,  use =  "pairwise.complete.obs")
corrplot(cor_matrix, method = 'square', type = 'full', insig='blank',
addCoef.col ='black', number.cex = 0.6, diag=FALSE)
# Plot histograms for numerical variables
energy %>% select_if(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
facet_wrap(~ key, scales = "free_x")
ggplot(energy, aes(x = x1)) +
geom_boxplot() +
labs(x = "E02 Event DMFS 2005", y = "Age",
title = "Boxplot of Age by E02 Event DMFS 2005") +
theme_minimal()
ggplot(energy, aes(x = X1)) +
geom_boxplot() +
labs(x = "E02 Event DMFS 2005", y = "Age",
title = "Boxplot of Age by E02 Event DMFS 2005") +
theme_minimal()
ggplot(energy, aes(y = X1)) +
geom_boxplot() +
labs(x = "E02 Event DMFS 2005", y = "Age",
title = "Boxplot of Age by E02 Event DMFS 2005") +
theme_minimal()
ggplot(energy, aes(y = X7)) +
geom_boxplot() +
labs(x = "E02 Event DMFS 2005", y = "Age",
title = "Boxplot of Age by E02 Event DMFS 2005") +
theme_minimal()
